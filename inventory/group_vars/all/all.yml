---
wyp_k8s01: 172.27.129.68
wyp_k8s02: 172.27.129.69
wyp_k8s03: 172.27.129.70

# kube-apiserver 的反向代理(kube-nginx)地址端口
KUBE_APISERVER: "https://127.0.0.1:8443"

# etcd 数据目录
ETCD_DATA_DIR: "/data/k8s/etcd/data"

# etcd WAL 目录，建议是 SSD 磁盘分区，或者和 ETCD_DATA_DIR 不同的磁盘分区
ETCD_WAL_DIR: "/data/k8s/etcd/wal"

# etcd 集群间通信的 IP 和端口
ETCD_NODES: "wyp_k8s01=https://172.27.129.68:2380,wyp_k8s02=https://172.27.129.69:2380,wyp_k8s03=https://172.27.129.70:2380"

# 生成 EncryptionConfig 所需的加密 key
# ENCRYPTION_KEY: $(head -c 32 /dev/urandom | base64)
ENCRYPTION_KEY: HqZI+SHQbYPR+sB3ev5MGtvFHxfGiWeqAOxDqIe4D3Y=

# 集群各机器 IP 数组
NODE_IPS: (172.27.129.68 172.27.129.69 172.27.129.70)

# 集群各 IP 对应的主机名数组
NODE_NAMES: (wyp_k8s01 wyp_k8s02 wyp_k8s03)

# etcd 集群服务地址列表
ETCD_ENDPOINTS: "https://172.27.129.68:2379,https://172.27.129.69:2379,https://172.27.129.70:2379"

# 节点间互联网络接口名称
IFACE: "eth0"

# k8s 各组件数据目录
K8S_DIR: "/data/k8s/k8s"

# docker 数据目录
DOCKER_DIR: "/data/k8s/docker"

## 以下参数一般不需要修改

# TLS Bootstrapping 使用的 Token，可以使用命令 head -c 16 /dev/urandom | od -An -t x | tr -d ' ' 生成
BOOTSTRAP_TOKEN: "41f7e4ba8b7be874fcff18bf5cf41a7c"

# 最好使用 当前未用的网段 来定义服务网段和 Pod 网段

# 服务网段，部署前路由不可达，部署后集群内路由可达(kube-proxy 保证)
SERVICE_CIDR: "10.254.0.0/16"

# Pod 网段，建议 /16 段地址，部署前路由不可达，部署后集群内路由可达(flanneld 保证)
CLUSTER_CIDR: "172.30.0.0/16"

# 服务端口范围 (NodePort Range)
NODE_PORT_RANGE: "30000-32767"

# flanneld 网络配置前缀
FLANNEL_ETCD_PREFIX: "/kubernetes/network"

# kubernetes 服务 IP (一般是 SERVICE_CIDR 中第一个IP)
CLUSTER_KUBERNETES_SVC_IP: "10.254.0.1"

# 集群 DNS 服务 IP (从 SERVICE_CIDR 中预分配)
CLUSTER_DNS_SVC_IP: "10.254.0.2"

# 集群 DNS 域名（末尾不带点号）
CLUSTER_DNS_DOMAIN: "cluster.local"